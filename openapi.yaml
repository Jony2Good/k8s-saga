openapi: 3.0.3
info:
  version: 0.1.0
  title: Тестовый сервис
  description: Сервис для работы с пользователями приложения
servers:
  - url: 'http://arch.homework/otusapp/aemelyanenko/api/'
    description: TEST
  - url: 'http://arch.homework/otusapp/aemelyanenko/api/'
    description: PROD

tags:
  -  name: Auth
     description: Содержит методы для работы с пользователями

  -  name: Billing
     description: Содержит методы для работы с аккаунтом пользователя

  -  name: Orders
     description: Содержит методы для работы с заказами

  -  name: Notifications
     description: Содержит методы для работы с уведомлениями

  -  name: Dishes
     description: Содержит методы для работы с товарами

  -  name: Payments
     description: Содержит методы для работы с оплатой заказа

paths:
  /auth/v1/register:
    post:
      tags:
        - Auth
      description: 'Регистрирует пользователя в системе'
      summary: 'Регистрация пользователя'
      operationId: 'register'
      requestBody:
        $ref: '#/components/requestBodies/employee'
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/register'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /auth/v1/login:
    post:
      tags:
        - Auth
      description: 'Аутентифицирует пользователя в системе'
      summary: 'Аутентификация пользователя'
      operationId: 'usersAuth'
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/login'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /auth/v1/refresh:
    post:
      tags:
        - Auth
      description: 'Обновление JWT токена'
      summary: 'Обновление токена'
      operationId: 'refresh'      
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/login'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /auth/v1/logout:
    post:
      tags:
        - Auth
      description: 'Выход пользователя из системы'
      summary: 'Выход пользователя'
      operationId: 'logout'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/login'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /auth/v1/me:
    post:
      tags:
        - Auth
      description: 'Получение данных пользователя'
      summary: 'Данные пользователя'
      operationId: 'getMe'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/register'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    put:
      tags:
        - Auth
      description: 'Изменение данных пользователя'
      summary: 'Изменение пользователя'
      operationId: 'putMe'
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/register'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Auth
      description: 'Удаление данных пользователя'
      summary: 'Удаление пользователя'
      operationId: 'destroyMe'
      security:
      - BearerAuth: []      
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/register'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /billing/v1/me:
    post:
      tags:
        - Billing
      description: 'Получение данных о счете/аккаунте пользователя'
      summary: 'Данные об аккаунте пользователя'
      operationId: 'billingShow'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/billingResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    put:
      tags:
        - Billing
      description: 'Изменение счета пользователя'
      summary: 'Изменение счета пользователя'
      operationId: 'putBilling'
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/billingBody'
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/billingResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /orders/v1/dishes:
    get:
      tags:
        - Dishes
      description: 'Получение списка товаров'
      summary: 'Список товаров'
      operationId: 'getDishes'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/dishResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /orders/v1/payments/{id}:
    get:
      tags:
        - Payments
      description: 'Оплата зарезервированного заказа'
      summary: 'Оплата заказа'
      operationId: 'paymentsOrder'
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: 'ID заказа для оплаты'
        schema:
          type: string
      - name: Idempotency-Key
        in: header
        required: false
        description: 'Ключ идемпотентности для защиты от повторной отправки запроса'
        schema:
          type: string
          default: '12345678910'      
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/paymentsResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /orders/v1/orders:
    get:
      tags:
        - Orders
      description: 'Получение данных о заказе пользователя'
      summary: 'Данные о заказе'
      operationId: 'ordersShow'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ordersResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    post:
      tags:
        - Orders
      description: 'Формирование заказа пользователем'
      summary: 'Сформировать заказа'
      operationId: 'storeOrders'
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ordersBody'
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ordersResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /notifications/v1/me:
    get:
      tags:
        - Notifications
      description: 'Получение данных о, отправленных уведомлениях пользователю'
      summary: 'Данные об уведомлениях'
      operationId: 'notificationShow'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 'Успешная операция'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/successModel'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/notificationsResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    
 
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    400BadRequest:
      description: 'Ошибки валидации запроса'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorModel'
          example: { "success": false, "data": null, "errors": [ { "type": "Bad Request", "code": 400, "message": "Метод для работы с данным запросом не найден." } ] }
    401Unauthorized:
      description: 'Ошибки аутентификации/авторизации по токену<br>(токен не передан, неверный токен и т.п.)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorModel'
          examples:
            undefinedToken:
              value: { "success": false, "data": null, "errors": [ { "type": "Undefined Token", "code": 401, "message": "Идентификационный токен не передан." } ] }
            invalidToken:
              value: { "success": false, "data": null, "errors": [ { "type": "Invalid Token", "code": 401, "message": "Переданный токен не найден, содержит неверный формат или просрочен." } ] }
    404NotFound:
      description: 'По данному запросу ни чего не найдено.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorModel'
          example: { "success": false, "data": null, "errors": [ { "type": "Not Found", "code": 404, "message": "Ни одного элемента, соответствующего данному запросу не найдено." } ] }
    422UnprocessableEntity:
      description: 'Ошибки бизнес-логики<br>(пользователь заблокирован и т.п.)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorModel'
          example: { "success": false, "data": null, "errors": [ { "type": "Unprocessable Entity", "code": 422, "message": "Пользователь заблокирован." } ] }
    500InternalServerError:
      description: 'Непредвиденные ошибки сервера'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorModel'
          example: { "success": false, "data": null, "errors": [ { "type": "Internal Server Error", "code": 500, "message": "Ошибка базы данных." } ] }

  requestBodies:
    login:
      description: JSON объект, содержащий информацию о пользователе
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:              
              email:
                type: string
                example: 'admin@mail.ru'
              password:
                type: string
                example: 'admin'

    employee:
      description: JSON объект, содержащий информацию о пользователе
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, email, password]
            properties:
              name:
                type: string
                example: 'Авдеева Эльвира Евгеньевна'
              email:
                type: string
                example: 'admin@mail.ru'
              password:
                type: string
                example: 'admin'

    billingBody:
      description: JSON объект, содержащий информацию о поплнении аккаунта
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [balance]
            properties:
              balance:
                type: integer
                example: 2000

    ordersBody:
      description: JSON объект, содержащий информацию о пользователе
      required: true
      content:
        application/json:
          schema:
            type: object           
            required: 
              - dishes
            properties:
              dishes:
                type: array
                description: Список блюд в заказе
                items:
                  type: object
                  required:
                    - id
                    - amount
                  properties:
                    id:
                      description: Номер блюда
                      type: integer
                      example: 1
                    amount:
                      description: Количество блюд в заказе
                      type: integer
                      example: 13                   

  schemas:
    successModel:
      type: object
      description: 'Объект корректного ответа'
      properties:
        success:
          description: 'Результат выполнения запроса (true)'
          type: boolean
          example: true
        data:
          description: 'Запрашиваемые данные, при отсутствии данных выводится <b>null</b>'
          type: object
        errors:
          description: 'При успешном выполнении запроса приходит пустой массив <b>[]</b>'
          type: array
          items:
            type: string
          example: [ ]
      required:
        - success
        - data
        - errors

    errorModel:
      type: object
      description: 'Объект ответа с ошибкой'
      properties:
        success:
          description: 'Результат выполнения запроса (false)'
          type: boolean
          example: false
        data:
          description: 'При ошибке приходит <b>null</b>'
          type: object
          example: null
        errors:
          description: 'Информация об ошибке'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'Тип ошибки'
                type: string
              code:
                description: 'Код ошибки'
                type: integer
              massage:
                description: 'Описание ошибки'
                type: string
      required:
        - success
        - data
        - errors

    login:
      description: 'Получение токена авторизации'
      required: [ access_token, token_type, expires_in ]
      type: object
      properties:
        access_token:
          description: JWT Token
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
        token_type:
          description: Тип токена
          type: string
          example: bearer
        expires_in:
          description: Время жизни токена
          type: integer
          example: 3600      

    register:
      description: 'Данные зарегистрированного пользователя'
      required: [ id, name, email]
      type: object
      properties:
        message:
          type: string
          description: Сообщение об успешной регистрации
          example: Пользователь зарегестрирован
        user:
          type: object
          description: Информация о пользователе
          required:
            - id
            - name
            - email
          properties:
            id:
              description: 'Числовой идентификатор пользователя'
              type: integer
              example: 1
            name:
              description: 'ФИО пользователя'
              type: string
              example: 'Авдееваа Эльвира Евгеньевна'
            email:
              description: 'Электронная почта" пользователя'
              type: string
              example: akk_1@mail.ru       

    billingResponse:
      description: 'Данные зарегистрированного пользователя'
      required: [id, user_id, balance, created_at, updated_at]
      type: object
      properties:
        id:
          type: integer
          description: Номер счета
          example: 999
        user_id:
          type: integer
          description: Номер пользователя
          example: 999
        balance:
          type: integer
          description: Состояние счета
          example: 999
        created_at:
          type: string
          description: Дата создания счета
          example: 2025-06-01
        updated_at:
          type: string
          description: Дата изменения счета
          example: 2025-06-01      
    
    dishResponse:
      description: 'Информация о товарах'
      required: [id, name, recipe, image_url, article, price]
      type: object
      properties:
        id:
          type: integer
          description: Номер товара
          example: 999
        name:
          type: string
          description: Название товара
          example: Яблочный пирог
        recipe:
          type: string
          description: Описание товара
          example: Хорошее блюдо
        image_url:
          type: string
          description: Ссылка на картинку
          example: https://article.jpg
        article:
          type: string
          description: Артикул товара
          example: 131313
        price:
          type: integer
          description: Цена товара
          example: 200

    paymentsResponse:
      description: 'Информация о товарах'
      required: [message]
      type: object
      properties:
        message:
          type: string
          description: Сообщение об операции
          example: Товар оплачен  

    ordersResponse:
      description: 'Данные о заказе'
      required: [id, user_id, created_at, updated_atб order_dishes]
      type: object
      properties:
        id:
          type: integer
          description: Номер заказа
          example: 999
        user_id:
          type: integer
          description: Номер пользователя
          example: 999        
        created_at:
          type: string
          description: Дата создания заказа
          example: 2025-06-01
        updated_at:
          type: string
          description: Дата изменения заказа
          example: 2025-06-01  
        order_dishes:
          type: object
          description: Информация о товаре
          required:
            - id
            - amount                
          properties:
            id:
              description: Номер блюда
              type: integer
              example: 1
            amount:
              description: Количество блюд в заказа
              type: integer
              example: 13     

    notificationsResponse:
      description: 'Информация о, отправленных уведомлениях'
      required: [id, name, recipe, image_url, article, price]
      type: object
      properties:
        id:
          type: integer
          description: Номер товара
          example: 999
        user:
          type: integer
          description: Номер пользователя
          example: 999
        order:
          type: integer
          description: Номер заказа
          example: 13
        email:
          type: string
          description: Адрес электронной почты пользователя
          example: example@gmail.com
        notification:
          type: string
          description: Текст уведомления
          example: Если хочешь жить...
        error:
          type: boolean
          description: Наличие ошибки при оплате заказа
          example: true    